#!/usr/bin/env ts-node

/**
 * Script d'initialisation pour une base de donn√©es fra√Æche
 * √Ä ex√©cuter apr√®s les migrations sur une nouvelle base
 */

import { NestFactory } from '@nestjs/core';
import { AppModule } from '../app.module';
import { UsersService } from '../users/users.service';
import { TenantsService } from '../tenants/tenants.service';

async function initFreshDatabase() {
  console.log('üöÄ Initialisation de la base de donn√©es fra√Æche...');

  const app = await NestFactory.createApplicationContext(AppModule);
  
  try {
    const usersService = app.get(UsersService);
    const tenantsService = app.get(TenantsService);

    // 1. Cr√©er un tenant par d√©faut (Pizzalif)
    console.log('üè¢ Cr√©ation du tenant par d√©faut...');
    const tenant = await tenantsService.create({
      name: 'Pizzalif',
      primaryColor: '#4F46E5',
      secondaryColor: '#10B981',
      backgroundColor: '#FFFFFF',
      textColor: '#1F2937',
    });
    
    console.log(`‚úÖ Tenant cr√©√©: ${tenant.name} (ID: ${tenant.id})`);

    // 2. Cr√©er un admin global (sans tenant)
    console.log('üë§ Cr√©ation de l\'admin global...');
    const admin = await usersService.create(
      'admin@franchisedesk.com',
      'admin123',
      'admin',
      null, // pas de tenant_id pour admin global
      null  // pas de restaurant_id pour admin global
    );
    
    console.log(`‚úÖ Admin global cr√©√©: ${admin.email} (ID: ${admin.id})`);

    // 3. Cr√©er un manager pour le tenant
    console.log('üîß Cr√©ation du manager tenant...');
    const manager = await usersService.create(
      'manager@pizzalif.com',
      'manager123',
      'manager',
      tenant.id,
      null // pas de restaurant_id pour manager
    );
    
    console.log(`‚úÖ Manager cr√©√©: ${manager.email} (ID: ${manager.id})`);

    console.log('\nüéâ Base de donn√©es initialis√©e avec succ√®s !');
    console.log('\nüìù Comptes cr√©√©s:');
    console.log(`   Admin Global: admin@franchisedesk.com / admin123`);
    console.log(`   Manager: manager@pizzalif.com / manager123`);
    console.log(`\nüè¢ Tenant: ${tenant.name} (ID: ${tenant.id})`);

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'initialisation:', error);
    throw error;
  } finally {
    await app.close();
  }
}

// Ex√©cuter si appel√© directement
if (require.main === module) {
  initFreshDatabase()
    .then(() => {
      console.log('‚úÖ Script termin√© avec succ√®s');
      process.exit(0);
    })
    .catch((error) => {
      console.error('‚ùå Script √©chou√©:', error);
      process.exit(1);
    });
}