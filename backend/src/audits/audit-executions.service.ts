import {
  Injectable,
  NotFoundException,
  ForbiddenException,
  Logger,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { AuditExecution } from './entities/audit-execution.entity';
import { AuditResponse } from './entities/audit-response.entity';
import { CreateAuditExecutionDto } from './dto/create-audit-execution.dto';
import { SubmitAuditResponseDto } from './dto/submit-audit-response.dto';
import { JwtUser } from '../common/interfaces/jwt-user.interface';
import { AuditArchivesService } from './audit-archives.service';

@Injectable()
export class AuditExecutionsService {
  private readonly logger = new Logger(AuditExecutionsService.name);

  constructor(
    @InjectRepository(AuditExecution)
    private auditExecutionRepository: Repository<AuditExecution>,
    @InjectRepository(AuditResponse)
    private auditResponseRepository: Repository<AuditResponse>,
    private auditArchivesService: AuditArchivesService,
  ) {}

  async create(
    createDto: CreateAuditExecutionDto,
    user: JwtUser,
  ): Promise<AuditExecution> {
    // V√©rifier les permissions (admin/manager uniquement pour planifier)
    if (!['admin', 'manager'].includes(user.role)) {
      throw new ForbiddenException(
        'Permissions insuffisantes pour planifier un audit',
      );
    }

    const scheduledDate = new Date(createDto.scheduled_date);
    const now = new Date();

    // D√©terminer le statut automatiquement selon la date
    let status: 'todo' | 'scheduled' = 'todo';
    if (scheduledDate > now) {
      status = 'scheduled'; // Audit planifi√© dans le futur
      this.logger.log(
        `üìÖ Audit planifi√© pour le ${scheduledDate.toLocaleDateString()} - Statut: scheduled`,
      );
    } else {
      this.logger.log(
        `‚ö†Ô∏è Audit √† faire maintenant ou en retard - Statut: todo`,
      );
    }

    const execution = this.auditExecutionRepository.create({
      ...createDto,
      scheduled_date: scheduledDate,
      status,
    });

    return this.auditExecutionRepository.save(execution);
  }

  async findAll(user: JwtUser): Promise<AuditExecution[]> {
    const whereCondition: any = {};

    // Super admin peut voir tous les audits de son tenant
    if (user.tenant_id) {
      whereCondition.template = { tenant_id: user.tenant_id };
    }

    // Si viewer ou inspecteur sp√©cifique, filtrer par restaurant
    if (user.role === 'viewer' && user.restaurant_id) {
      whereCondition.restaurant_id = user.restaurant_id;
    }

    const executions = await this.auditExecutionRepository.find({
      where: whereCondition,
      relations: [
        'template',
        'restaurant',
        'inspector',
        'responses',
        'responses.item',
      ],
      order: { scheduled_date: 'DESC' },
    });

    // üïí MISE √Ä JOUR AUTOMATIQUE DES STATUTS SELON LA DATE
    await this.updateStatusBasedOnDate(executions);

    return executions;
  }

  async findOne(id: number, user: JwtUser): Promise<AuditExecution> {
    const execution = await this.auditExecutionRepository.findOne({
      where: { id },
      relations: [
        'template',
        'template.items',
        'restaurant',
        'inspector',
        'responses',
        'responses.item',
      ],
    });

    if (!execution) {
      throw new NotFoundException('Audit non trouv√©');
    }

    // V√©rifier les permissions d'acc√®s
    if (user.tenant_id && execution.template.tenant_id !== user.tenant_id) {
      throw new ForbiddenException('Acc√®s refus√©');
    }

    if (
      user.role === 'viewer' &&
      user.restaurant_id !== execution.restaurant_id
    ) {
      throw new ForbiddenException('Acc√®s refus√©');
    }

    return execution;
  }

  async submitResponse(
    executionId: number,
    responseDto: SubmitAuditResponseDto,
    user: JwtUser,
  ): Promise<AuditResponse> {
    const execution = await this.findOne(executionId, user);

    // V√©rifier que l'audit peut √™tre modifi√©
    if (execution.status === 'completed' || execution.status === 'reviewed') {
      throw new ForbiddenException('Cet audit est d√©j√† finalis√©');
    }

    // Chercher une r√©ponse existante
    let response = await this.auditResponseRepository.findOne({
      where: {
        execution_id: executionId,
        item_id: responseDto.item_id,
      },
    });

    if (response) {
      // Mettre √† jour la r√©ponse existante
      await this.auditResponseRepository.update(response.id, responseDto);
      const updatedResponse = await this.auditResponseRepository.findOne({
        where: { id: response.id },
        relations: ['item'],
      });

      if (!updatedResponse) {
        throw new NotFoundException(
          'Erreur lors de la mise √† jour de la r√©ponse',
        );
      }

      response = updatedResponse;
    } else {
      // Cr√©er une nouvelle r√©ponse
      response = this.auditResponseRepository.create({
        execution_id: executionId,
        ...responseDto,
      });
      response = await this.auditResponseRepository.save(response);
    }

    // Mettre √† jour le statut de l'audit si n√©cessaire
    if (execution.status === 'todo') {
      await this.auditExecutionRepository.update(executionId, {
        status: 'in_progress',
      });
    }

    return response;
  }

  async completeAudit(id: number, user: JwtUser): Promise<AuditExecution> {
    this.logger.log(
      `üéØ COMPLETE AUDIT - D√©but finalisation audit ID: ${id} par user ${user.userId}`,
    );

    try {
      const execution = await this.findOne(id, user);
      this.logger.log(
        `üìã COMPLETE AUDIT - Audit trouv√©: ${execution.id}, statut: ${execution.status}`,
      );
    } catch (error) {
      this.logger.error(
        `‚ùå COMPLETE AUDIT - Erreur lors de la recherche de l'audit ${id}: ${error.message}`,
      );
      throw error;
    }

    const execution = await this.findOne(id, user);

    if (execution.status === 'completed' || execution.status === 'reviewed') {
      throw new ForbiddenException('Cet audit est d√©j√† finalis√©');
    }

    // Calculer le score total
    const responses = await this.auditResponseRepository.find({
      where: { execution_id: id },
      relations: ['item'],
    });

    let totalScore = 0;
    let maxPossibleScore = 0;

    responses.forEach((response) => {
      if (response.item.type === 'score' && response.score !== null) {
        totalScore += response.score;
        maxPossibleScore += response.item.max_score || 0;
      } else if (response.item.type === 'yes_no') {
        const score = response.value === 'true' ? 1 : 0;
        totalScore += score;
        maxPossibleScore += 1;
      }
    });

    await this.auditExecutionRepository.update(id, {
      status: 'completed',
      completed_date: new Date(),
      total_score: totalScore,
      max_possible_score: maxPossibleScore,
    });

    // PAS D'ARCHIVAGE AUTOMATIQUE - L'archivage doit √™tre fait s√©par√©ment
    // pour √©viter que l'audit disparaisse imm√©diatement apr√®s finalisation
    this.logger.log(`‚úÖ Audit ${id} finalis√© avec succ√®s. Status: completed`);

    return this.findOne(id, user);
  }

  /**
   * Archiver manuellement un audit finalis√©
   */
  async archiveAudit(id: number, user: JwtUser): Promise<any> {
    this.logger.log(
      `üóÑÔ∏è ARCHIVE AUDIT - D√©but archivage manuel audit ID: ${id} par user ${user.userId}`,
    );

    // V√©rifier que l'audit existe et est finalis√©
    const execution = await this.findOne(id, user);

    if (execution.status !== 'completed') {
      throw new ForbiddenException(
        'Seuls les audits termin√©s peuvent √™tre archiv√©s',
      );
    }

    try {
      this.logger.log(`üóÑÔ∏è Archivage manuel de l'audit ${id}`);
      const archive = await this.auditArchivesService.archiveCompletedAudit(
        id,
        user,
      );
      this.logger.log(
        `‚úÖ Audit ${id} archiv√© manuellement avec succ√®s (Archive ID: ${archive.id})`,
      );
      return archive;
    } catch (error) {
      this.logger.error(
        `‚ùå √âchec archivage manuel pour audit ${id}: ${error.message}`,
      );
      throw error;
    }
  }

  /**
   * üïí MISE √Ä JOUR AUTOMATIQUE DES STATUTS SELON LA DATE
   * Met √† jour les statuts des audits selon leur date planifi√©e
   */
  private async updateStatusBasedOnDate(
    executions: AuditExecution[],
  ): Promise<void> {
    try {
      const now = new Date();
      const updatesToMake: { id: number; newStatus: string; reason: string }[] =
        [];

      for (const execution of executions) {
        const scheduledDate = new Date(execution.scheduled_date);
        let shouldUpdate = false;
        let newStatus = execution.status;
        let reason = '';

        // Audit planifi√© (scheduled) dont la date est arriv√©e/pass√©e ‚Üí passer √† faire (todo)
        if (execution.status === 'scheduled' && scheduledDate <= now) {
          newStatus = 'todo';
          reason = 'Date planifi√©e atteinte - audit disponible pour ex√©cution';
          shouldUpdate = true;
        }

        // Audit √† faire (todo) planifi√© dans le futur ‚Üí passer en planifi√© (scheduled)
        if (execution.status === 'todo' && scheduledDate > now) {
          newStatus = 'scheduled';
          reason = 'Audit planifi√© dans le futur';
          shouldUpdate = true;
        }

        if (shouldUpdate) {
          updatesToMake.push({
            id: execution.id,
            newStatus,
            reason,
          });
        }
      }

      // Effectuer les mises √† jour en batch
      if (updatesToMake.length > 0) {
        this.logger.log(
          `üîÑ Mise √† jour de ${updatesToMake.length} statut(s) d'audit selon les dates`,
        );

        for (const update of updatesToMake) {
          // Trouver l'ex√©cution correspondante
          const execution = executions.find((e) => e.id === update.id);
          const oldStatus = execution?.status || 'unknown';

          await this.auditExecutionRepository.update(update.id, {
            status: update.newStatus as any,
          });
          this.logger.log(
            `üìÖ Audit ${update.id}: ${oldStatus} ‚Üí ${update.newStatus} (${update.reason})`,
          );

          // Mettre √† jour l'objet en m√©moire aussi
          if (execution) {
            execution.status = update.newStatus as any;
          }
        }
      }
    } catch (error) {
      this.logger.error(
        `‚ùå Erreur lors de la mise √† jour automatique des statuts: ${error.message}`,
      );
      // On ne fait pas √©chouer la requ√™te m√™me si la mise √† jour √©choue
    }
  }
}
